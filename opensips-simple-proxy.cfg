######## Global Parameters #######
log_level = 3                 #[-3 - Alert level] [-2 - Critical level] [-1 - Error level]
                                #[1 - Warning level] [2 - Notice level] [3 - Info level] [4 - Debug level]
xlog_level = 3
syslog_enabled=no                         #Enable or Disable stderror
syslog_facility=LOG_LOCAL0                 #log facility of rsyslog system service

udp_workers=4                             #UDP children for process the UDP requests

db_default_url="mysql://user:password@localhost/opensips"

socket=udp:<ip_address>:<port>         #change the listen socket with transport protocol
#mhomed=1
####### Module Section #######

#set module path
mpath="/usr/local/lib64/opensips/modules/"

loadmodule "signaling.so"               # it just provide a wrapper over sl and tm module to send the reply. If transaction is already created

loadmodule "sl.so"                      # Provide stateless reply

loadmodule "tm.so"
modparam("tm", "fr_timeout", 3)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)
modparam("tm", "auto_100trying", 1)

loadmodule "db_mysql.so"

loadmodule "permissions.so"
modparam("permissions","db_url","mysql://user:password@localhost/opensips")

loadmodule "dialog.so"
modparam("dialog", "db_mode", 0)
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "reinvite_ping_interval", 300)

loadmodule "dispatcher.so"
modparam("dispatcher","db_url","mysql://user:password@localhost/opensips")
modparam("dispatcher", "ds_ping_from", "sip:opensips@pinger.com")
modparam("dispatcher", "ds_ping_interval", 30)
modparam("dispatcher", "ds_probing_sock", "udp:<ip_address>:<port>")  # Modify to the desired IP and port
#modparam("dispatcher", "ds_probing_mode", 0) #temporary added to restrict the probing due to socket issue
modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "options_reply_codes", "200,202,404,503,405,481,483")
modparam("dispatcher", "persistent_state", 1)

loadmodule "maxfwd.so"

loadmodule "rr.so"
modparam("rr", "append_fromtag", 0)

loadmodule "sipmsgops.so"

loadmodule "uac.so"
modparam("uac", "force_dialog", yes)

loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

loadmodule "proto_udp.so"

loadmodule "httpd.so"
modparam("httpd", "ip", "127.0.0.1") #this may be private ip
modparam("httpd", "port", 8000)

loadmodule "mi_http.so"
modparam("mi_http", "root", "opensips_mi")

loadmodule "avpops.so"
loadmodule "textops.so"
######## Routing Logic #######
# main request routing logic
route {
	$avp(source_ip)=$si;
	$avp(source_port)=$sp;
	$avp(orig_proto) = $socket_in(proto);
	$avp(from_number) = $fU;
	$avp(to_number) = $tU;
	$avp(from_domain) = $fd;
	$avp(to_domain) = $td;
	$avp(from-uri) = $fu;
	$avp(to-uri) = $tu;
	xlog("L_INFO","[MAIN-ROUTE]INCOMING REQUEST:[$rm] Source: [$si:$sp] [$ci:$ct] \n");
	t_check_trans();
	if(is_method("MESSAGE|SUBSCRIBE|PUBLISH|REGISTER")){
		send_reply(501,"Method is Not Implemented");
		exit;
	}
	route(SANITY_CHECKS);

	if(is_method("INVITE")){
		record_route();
	}

	route(WITHIN_DIALOG);
	if(is_method("CANCEL")){
		route(PROCESS_CANCEL);
		exit;
	}
	if(is_method("OPTIONS|INFO")){
		route(PROCESS_OPTIONS);
		exit;
	}
	if(is_method("ACK")){
		route(PROCESS_ACK);
		exit;
	}
	if(has_totag()) {
		xlog("L_ERROR", "[MAIN-ROUTE]#$ci#$rm# Dialog does not exist \n");
		send_reply(481,"Dialog does not exist");
		exit;
	}
	route(AUTHENTICATE);
	route(RELAY_ROUTE);
}

route[SANITY_CHECKS] {
    force_rport(); # fix port just incase source port is different than the port in contact
        if (!mf_process_maxfwd_header(10) && !is_method("OPTIONS")) {
            sl_send_reply(483,"Too Many Hops");
            exit;
        }
}

route[WITHIN_DIALOG] {
	if (has_totag() && is_method("INVITE|ACK|BYE|UPDATE|REFER|PRACK|INFO|NOTIFY|OPTIONS")) {
		if (loose_route()) {
			if(is_method("BYE")) {
				xlog("L_INFO","[WITHIN_DIALOG]#$ci#$rm# Terminating Call \n");
			}

			if (is_method("ACK")) {
				xlog("L_INFO","[WITHIN_DIALOG]#$ci#$rm# \n");
			}
			route(RELAY_ROUTE);
		}

		if (is_method("ACK") && t_check_trans()) {
			xlog("L_INFO","[WITHIN_DIALOG]#$ci#$rm# detected with valid transaction - t_relay \n");
			exit;
		}
		sl_send_reply(404,"Not here");
		exit;
	}  
}

route[PROCESS_ACK] {
    xlog("L_INFO", "[PROCESS_ACK]#$ci#$rm# \n");
    route(CHECK_TRANSACTION);
}

route[PROCESS_CANCEL] {
    xlog("L_INFO", "[PROCESS_CANCEL]#$ci#$rm# \n");
    route(CHECK_TRANSACTION);
}

route[CHECK_TRANSACTION] {
    xlog("L_INFO", "[CHECK_TRANSACTION]#$ci#$rm# \n");
    if(t_check_trans()) {
        route(RELAY_ROUTE);
    }
    exit;
}

route[PROCESS_OPTIONS] {
    sl_send_reply(200,"OK");
    exit;
}

route[AUTHENTICATE] {
	xlog("L_INFO", "[AUTHENTICATE]#$ci#$rm# \n");
	if(!is_method("INVITE"))
		return;
	t_newtran();

	if(check_address(1,$avp(source_ip),$avp(source_port),$avp(orig_proto),$avp(context_info))){
		xlog("L_INFO", "[AUTHENTICATE]#$ci#$rm# IP-Authenticate User Call Source [$avp(orig_proto):$avp(source_ip):$avp(source_port)] [Context-Info:$avp(context_info)] \n");
		create_dialog();
		route(DISPATCHER);
	}else {
		xlog("L_WARN", "[AUTHENTICATE]#$ci#$rm# Unknown Call Source $avp(orig_proto):$avp(source_ip):$avp(source_port) \n");
		send_reply(403,"Unknown Source");
		exit;
	}
}

route[DISPATCHER]{
	xlog("L_INFO","[DISPATCHER]#$ci#$rm# \n");
	if(is_method("INVITE")){
		xlog("L_INFO","[DISPATCHER]#$ci#$rm# [ROUND_ROBIN] Calling to $avp(to_number) \n");
		if (!ds_select_domain(1,4,"f")) {
			send_reply(500,"Unable to found destination gateway");
			exit;
		}
		t_on_failure("DISPATCHER_FAILURE_ROUTE");
	}
}

failure_route[DISPATCHER_FAILURE_ROUTE]{
        if(t_check_status("4[0-9][0-9]|5[0-9][0-9]|6[0-9][0-9]")){
                if(ds_next_domain()){
                        xlog("L_WARN","[DISPATCHER_FAILURE_ROUTE]#$ci#$rm# Find Next Available Trunk \n");
                        t_on_failure("DISPATCHER_FAILURE_ROUTE");
                        route(RELAY_ROUTE);
                }
        }
}

route[RELAY_ROUTE] {
        xlog("L_INFO", "[RELAY_ROUTE]#$ci#$rm# [Request-Uri:$ru] \n");
        if(is_method("INVITE") && !has_totag()) {
                xlog("L_INFO","--- [RELAY_ROUTE]#$ci#$rm# CI:$ci In Relay Route RU:$ru DU:$du Tu:$tu TU:$tU CT:$ct \n");
                t_on_branch("BRANCH_ROUTE");
        }else if (is_method("BYE|CANCEL")) {
                xlog("L_INFO", "[RELAY_ROUTE]#$ci#$rm# \n");
        }
        t_on_reply("REPLY_ROUTE");
        if(has_body_part("application/sdp") && has_totag()) {
                if(is_method("INVITE|UPDATE")) {
                         xlog("L_INFO", "[RELAY_ROUTE]#$ci#$rm# [INCOMING] Re-INVITE Packet \n");
                } else if(is_method("ACK")) {
                        xlog("L_INFO", "[RELAY_ROUTE]#$ci#$rm# Seq-ACK Packet \n");
                }
        }

        if(!t_relay()) {
                sl_reply_error();
        }
        exit;
}

branch_route[BRANCH_ROUTE] {
        xlog("L_INFO","[BRANCH_ROUTE]#$ci#$rm# \n");
        if (!is_method("INVITE") || !has_body("application/sdp"))
                return;
}

onreply_route[REPLY_ROUTE] {
        xlog("L_INFO","[REPLY_ROUTE]#$ci#$rm# REPLY_ROUTE Response:$rs \n");
}
